---
title: Description of dataset challenge2018
weave_options:
  error: true
  wrap: true
  term: false
---

```julia
using JLD2, DataFrames, CairoMakie
using FreqTables
using Jchemo, JchemoData
```

#### Data importation

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/challenge2018.jld2") 
@load db dat
pnames(dat)
```

```julia
X = dat.X   
ntot = nro(X)
summ(X)
```

```julia
Y = dat.Y 
summ(Y)
```

```julia
wl = names(X)
wl_num = parse.(Float64, wl)
```

```julia
typ = Y.typ
test = Y.test
```

```julia
z = string.(typ, "-", Y.label)
tab(z)
```

```julia
freqtable(z)
```

```julia
freqtable(typ, test)
```
### Preprocesssing

```julia
## Preprocessing
f = 21 ; pol = 3 ; d = 2
Xp = savgol(snv(X); f = f, pol = pol, d = d) 
```

```julia
plotsp(X, wl_num; nsamp = 100,
    xlabel = "Wavelength (nm)").f
```

```julia
plotsp(Xp, wl_num; nsamp = 100,
    xlabel = "Wavelength (nm)").f
```

### PCA

Splitting: Tot = Train + Test

The PCA is fitted on Train, and Test will be 
the supplementary observations.

Here the splitting is provided by the dataset
(= variable *typ*) but, alternatively, data Tot could be splitted 
a posteriori (e.g. random sampling, systematic 
sampling, etc.) 

```julia
s = Bool.(test)
## or: s = test .== 1
Xtrain = rmrow(Xp, s)
Ytrain = rmrow(Y, s)
Xtest = Xp[s, :]
Ytest = Y[s, :]
ntrain = nro(Xtrain)
ntest = nro(Xtest)
(ntot = ntot, ntrain, ntest)
```
#### Model fitting (Train)

```julia
nlv = 15
fm = pcasvd(Xtrain, nlv = nlv) ;
pnames(fm)
```

```julia
res = summary(fm, Xtrain).explvarx
```

```julia
plotgrid(res.lv, res.pvar; step = 2,
    xlabel = "PC", 
    ylabel = "Prop. variance explained").f
```

#### Projection of Test in the Train score-space

Below function *transform* has to be qualified 
since both packages Jchemo and DataFrames export 
a function *transform*. 

This will be the same with common function names
such as *predict*, *coef*, etc.

```julia
Ttrain = fm.T
Ttest = Jchemo.transform(fm, Xtest)
```

```julia
## Graphic
T = vcat(Ttrain, Ttest)
group = vcat(repeat(["0-Train";], ntrain), 
repeat(["1-Test";], ntest))
colm = [:blue, (:red, .5)]
i = 3
plotxy(T[:, i:(i + 1)], group; color = colm,
    xlabel = string("PC", i), 
    ylabel = string("PC", i + 1)).f
```

