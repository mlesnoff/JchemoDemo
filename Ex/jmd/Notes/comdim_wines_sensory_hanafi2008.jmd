---
title: ComDim - wines_sensory - Hanafi2008
weave_options:
  error: true
  wrap: false
  term: false
  out_width: 60%
  out_height: 30%
---

This note replicates the analysis of the **wines sensory dataset** presented by Hanafi & Quanari (2008):

* Hanafi, M., Qannari, E.M., 2008. Nouvelles propriétés de l’analyse en composantes communes 
    et poids spécifiques. Journal de la société française de statistique 149, 75–97

where the **ComDim** method (Common components and specific weights analysis; *aka* CCSWA) is used to 
explore the data.

[Wines sensory dataset](https://github.com/mlesnoff/JchemoData.jl/tree/main?tab=readme-ov-file#wines_sensory): 
A jury of four expert tasters ("judges") evaluated the appearance of eight wines according to the procedure 
known as *free profile*. Each judge notes on a scale from 0 to 10 the products according to **his/her own variables**. 
For a product and a given variable, the note given by a judge is the intensity on which
he/she perceives the variable. Each matrix Xk (k = 1, ..., 4) is associated to one judge. 

The goal of the ComDim study was to evaluate if there was an agreement between judges or groups of judges 
and to assess the relationships among the eight wines.

#### Data importation

```julia
using Jchemo, JchemoData
using JLD2, CairoMakie
```

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/wines_sensory.jld2")
@load db dat
@names dat
```

```julia
X1 = dat.X1 
X2 = dat.X2
X3 = dat.X3
X4 = dat.X4
Xbl = [X1, X2, X3, X4]   # Same as: Xbl = [[X1]; [X2]; [X3]; [X4]]
```

```julia
n = nro(X1)
nbl = length(Xbl)
```

#### Model fitting

Below, each block is scaled by its Frobenius norm, and three global components (scores) are computed

```julia
nlv = 3
bscal = :frob
model = comdim(; nlv, bscal)
fit!(model, Xbl)
fitm = model.fitm
@names fitm
```

- Global scores

```julia
@head T = fitm.T
```

```julia 
i = 1 
f, ax = plotxy(T[:, i], T[:, i + 1]; zeros = true, xlabel = string("PC", i), ylabel = string("PC", i + 1)) 
text!(ax, T[:, i], T[:, i + 1]; text = string.("w", 1:n), fontsize = 15)
f
```

- Block scores and block loadings

```julia
Tbl = fitm.Tbl
```

```julia
Vbl = fitm.Vbl
```
- For block *k*

```julia
k = 1
Tbl[k]
```

```julia
Vbl[k]
```
#### Summary outputs

```julia
res = summary(model, Xbl)
@names res
```

- Proportion of the total XX' inertia explained by the global scores

```julia
res.explvarxx
```

- Proportion of the inertia of each block (= Xbl[k]) explained by the global scores

```julia
explxbl = res.explxbl  # = specific weights 'lb' when 'bscal = :frob'
```

```julia 
rowsum(explxbl)
```

- Contribution of each block to the global scores

```julia
contrxbl2t = res.contrxbl2t
```

```julia 
colsum(contrxbl2t)
```

```julia 
z = contrxbl2t
i = 1
f, ax = plotxy(z[:, i], z[:, i + 1]; zeros = true, xlabel = string("PC", i), 
    ylabel = string("PC", i + 1)) 
text!(ax, z[:, i], z[:, i + 1]; text = string.("j", 1:nbl), fontsize = 15) 
xlims!(ax, [0, .4]) 
ylims!(ax, [0, .9]) 
f
```

- RV coefficients between each block and the global LVs

```julia
res.rvxbl2t
```

- Correlation between the X-variables and the global scores

```julia
corx2t = res.corx2t
```

```julia 
z = corx2t 
nvar = nro(z) 
i = 1
f, ax = plotxy(z[:, i], z[:, i + 1]; zeros = true, xlabel = string("PC", i), 
    ylabel = string("PC", i + 1)) 
text!(ax, z[:, i], z[:, i + 1]; text = string.("v", 1:nvar), fontsize = 15) 
xlims!(ax, [-1, 1]) 
ylims!(ax, [-1, 1]) 
f
```

#### Simultaneous representation of observations and loadings

- Block *k* in the global score space 

```julia 
k = 4
v = Vbl[k]
nam = names(Xbl[k])
i = 1
f, ax = plotxy(T[:, i], T[:, i + 1]; zeros = true, xlabel = string("PC", i), 
    ylabel = string("PC", i + 1)) 
text!(ax, T[:, i], T[:, i + 1]; text = string.("w", 1:n), fontsize = 15) 
scatter!(ax, v[:, i], v[:, i + 1]) 
text!(ax, v[:, i], v[:, i + 1]; text = nam, fontsize = 15) 
ylims!(ax, [-1, 1]) 
f
```

- Block *k* in the block score space 

```julia
k = 4  # fourth block
z = Tbl[k] 
v = Vbl[k] 
nam = names(Xbl[k]) 
i = 1
f, ax = plotxy(z[:, i], z[:, i + 1]; zeros = true, xlabel = string("PC", i), 
    ylabel = string("PC", i + 1), title = string("Block ", k)) 
text!(ax, z[:, i], z[:, i + 1]; text = string.("w", 1:n), fontsize = 15) 
scatter!(ax, v[:, i], v[:, i + 1]) 
text!(ax, v[:, i], v[:, i + 1]; text = nam, fontsize = 15) 
ylims!(ax, [-1, 1]) 
f
```

#### Main conclusion

Judge *4* was atypical from the other judges and determined the global score *2*. 
In contrast to judges *1-3*, judge *4* gave particularly high ratings to wines *w6* and *w8* 
(variable *v13: expenses*, and variable *v14: brilliant*).


