---
title: challenge2018 - Data description
weave_options:
  error: true
  wrap: true
  term: false
  out_width: "60%" 
---

```julia
using Jchemo, JchemoData
using JLD2, CairoMakie
using FreqTables
```

#### Data importation

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/challenge2018.jld2") 
@load db dat
pnames(dat)
```

#### Data preparation and short description

```julia
X = dat.X 
Y = dat.Y
ntot, p = size(X)
```

```julia term = true
@head X
@head Y
```

```julia
summ(Y)
```

```julia
y = Y.conc
typ = Y.typ
label = Y.label 
test = Y.test
tab(test)
```

```julia
wlst = names(X)
wl = parse.(Float64, wlst)
```

```julia
freqtable(string.(typ, "-", Y.label))
```

```julia
freqtable(typ, test)
```

```julia
plotsp(X, wl; nsamp = 30, xlabel = "Wavelength (nm)").f
```

#### Preprocessing

```julia
model1 = snv()
model2 = savgol(npoint = 21, deriv = 2, degree = 3)
model = pip(model1, model2)
fit!(model, X)
Xp = transf(model, X) 
```

```julia
plotsp(Xp, wl; nsamp = 30, xlabel = "Wavelength (nm)").f
```

#### Split Tot ==> Train + Test

Here the split of **Tot** between datasets **Train** and **Test** is already provided inside 
the dataset (= variable `test`), but **Tot** could also be split *a posteriori*, for instance 
by sampling (random, systematic or any other designs). 

```julia
s = Bool.(test)
Xtrain = rmrow(Xp, s)
Ytrain = rmrow(Y, s)
ytrain = rmrow(y, s)
typtrain = rmrow(typ, s)
Xtest = Xp[s, :]
Ytest = Y[s, :]
ytest = y[s]
typtest = typ[s]
ntrain = nro(Xtrain)
ntest = nro(Xtest)
(ntot = ntot, ntrain, ntest)
```

#### Pca on Xp

```julia
model = pcasvd(nlv = 10)
fit!(model, Xp)
pnames(model)
pnames(model.fitm)
```

```julia term = true
@head T = model.fitm.T
```

```julia
res = summary(model, Xp) ;
pnames(res)
```

```julia
z = res.explvarx
```

```julia
plotgrid(z.nlv, 100 * z.pvar; step = 1, xlabel = "nb. PCs", ylabel = "% variance explained").f
```

```julia
i = 1
plotxy(T[:, i], T[:, i + 1]; color = (:red, .5), xlabel = string("PC", i), 
    ylabel = string("PC", i + 1)).f
```

```julia
lev = mlev(typ)
nlev = length(lev)
colm = cgrad(:Dark2_5, nlev; categorical = true)
plotxy(T[:, i], T[:, i + 1], typ; color = colm, xlabel = string("PC", i), 
    ylabel = string("PC", i + 1)).f
```

#### Pca on Xtrain and projection of Xtest

```julia
model = pcasvd(nlv = 15)
fit!(model, Xtrain)
```

```julia term = true
Ttrain = model.fitm.T
@head Ttrain
```

Xtest is projected on the Xtrain score space:

```julia term = true
Ttest = transf(model, Xtest)
@head Ttest 
```

```julia
T = vcat(Ttrain, Ttest)
group = vcat(repeat(["0-Train";], ntrain), repeat(["1-Test";], ntest))
colm = [:blue, (:red, .5)]
i = 1
plotxy(T[:, i], T[:, i + 1], group; color = colm, xlabel = "PC1", ylabel = "PC2").f
```

**Score (SD) and orthogonal (OD) distances**

```julia
model_sd = occsd() 
fit!(model_sd, model.fitm)
pnames(model_sd)
sdtrain = model_sd.fitm.d
sdtest = predict(model_sd, Xtest).d
```

```julia
model_od = occod() 
fit!(model_od, model.fitm, Xtrain)
pnames(model_od)
odtrain = model_od.fitm.d
odtest = predict(model_od, Xtest).d
```

```julia
f = Figure(size = (500, 400))
ax = Axis(f; xlabel = "SD", ylabel = "OD")
scatter!(ax, sdtrain.dstand, odtrain.dstand, label = "Train")
scatter!(ax, sdtest.dstand, odtest.dstand, color = (:red, .5), label = "Test")
hlines!(ax, 1; color = :grey, linestyle = :dash)
vlines!(ax, 1; color = :grey, linestyle = :dash)
axislegend(position = :rt)
f[1, 1] = ax
f
```

```julia
zres = model_sd ; nam = "SD"
#zres = model_od ; nam = "OD"
pnames(zres.fitm)
sdtrain = zres.fitm.d
sdtest = predict(zres, Xtest).d
f = Figure(size = (500, 400))
ax = Axis(f[1, 1]; xlabel = nam, ylabel = "Nb. observations")
hist!(ax, sdtrain.d; bins = 50, label = "Train")
hist!(ax, sdtest.d; bins = 50, label = "Test")
vlines!(ax, zres.fitm.cutoff; color = :grey, linestyle = :dash)
axislegend(position = :rt)
f
```

#### Y-variables

```julia
summ(y)
```

```julia
summ(y, test)
```

```julia
aggstat(y, test).X
```

```julia
aggstat(Y; vary = :conc, vargroup = :test)
```

```julia
f = Figure(size = (500, 400))
ax = Axis(f[1, 1]; xlabel = "Protein", ylabel = "Nb. observations")
hist!(ax, ytrain; bins = 50, label = "Train")
hist!(ax, ytest; bins = 50, label = "Test")
axislegend(position = :rt)
f
```

```julia
f = Figure(size = (500, 400))
offs = [100; 0]
ax = Axis(f[1, 1]; xlabel = "Protein",  ylabel = "Nb. observations", 
    yticks = (offs, ["Train" ; "Test"]))
hist!(ax, ytrain; offset = offs[1], bins = 50)
hist!(ax, ytest; offset = offs[2], bins = 50)
f
```

```julia
f = Figure(size = (500, 400))
ax = Axis(f[1, 1]; xlabel = "Protein", ylabel = "Density")
density!(ax, ytrain; color = :blue, label = "Train")
density!(ax, ytest; color = (:red, .5), label = "Test")
axislegend(position = :rt)
f
```

```julia
f = Figure(size = (500, 400))
offs = [.1; 0]
ax = Axis(f[1, 1]; xlabel = "Protein", ylabel = "Density", yticks = (offs, ["Train" ; "Test"]))
density!(ax, ytrain; offset = offs[1], color = (:slategray, 0.5), bandwidth = 0.2)
density!(ax, ytest; offset = offs[2], color = (:slategray, 0.5), bandwidth = 0.2)
f
```

```julia
f = Figure(size = (500, 400))
ax = Axis(f[1, 1]; xticks = (0:1, ["Train", "Test"]), xlabel = "Group", ylabel = "Protein")
boxplot!(ax, test, y; width = .3, show_notch = true)
f
```

