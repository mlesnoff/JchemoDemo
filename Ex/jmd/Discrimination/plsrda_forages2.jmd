---
title: plsrda_forages2.jl
weave_options:
  error: true
  wrap: true
  term: false
  #out_width: "50%"   # default
---

```julia
using Jchemo, JchemoData
using JLD2, CairoMakie, FreqTables 
```

#### Data importation

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/forages2.jld2") 
@load db dat
pnames(dat)
```
  
#### Data preparation and short description

```julia
X = dat.X 
Y = dat.Y
ntot = nro(X)
```

```julia term = true
@head X
@head Y
```

```julia
y = Y.typ
tab(y)
```

```julia
freqtable(y, Y.test)
```

```julia
wlst = names(X)
wl = parse.(Float64, wlst) 
```

**Note:**: X-data are already preprocessed (SNV + Savitsky-Golay).

```julia
plotsp(X, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

#### Split Tot ==> Train + Test

The model is fitted on **Train**, and the generalization error is estimated on **Test**.
Here the split of **Tot** is already provided inside the dataset (= variable `test`), 
but **Tot** could also be split *a posteriori*, for instance by sampling (random, systematic 
or any other designs). 

```julia
s = Bool.(Y.test)
Xtrain = rmrow(X, s)
ytrain = rmrow(y, s)
Xtest = X[s, :]
ytest = y[s]
ntrain = nro(Xtrain)
ntest = nro(Xtest)
(ntot = ntot, ntrain, ntest)
```

#### Model fitting

The term "PLSDA" can represent different methods, e.g. PLSR-DA, PLS-LDA and PLS-QDA. 

```julia 
nlv = 15
mo = plsrda(; nlv) 
#mo = plslda(; nlv) 
#mo = plsqda(; nlv) 
#mo = plsqda(; nlv, prior = :prop) 
```

An alternative to PLS is the ridge regularization (RR-DA):

```julia
#mo = rrda(lb = 1e-5)
```

```julia
fit!(mo, Xtrain, ytrain)
pnames(mo) 
pnames(mo.fm)
```

#### Predictions

```julia
res = predict(mo, Xtest) ;
pnames(res)
```

```julia
@head pred = res.pred
```

```julia
@head res.posterior   # prediction of the dummy table
```

```julia
errp(pred, ytest)
```

#### Confusion matrix

```julia
freqtable(ytest, vec(pred))
```

```julia
cf = confusion(pred, ytest) ;
pnames(cf)
```

```julia
cf.cnt
```

```julia
cf.pct
```

```julia
cf.accuracy 
```

```julia
plotconf(cf).f
```


