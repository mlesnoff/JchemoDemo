---
title: gridcv_lwplsrda_forages2.jl
weave_options:
  error: true
  wrap: true
  term: false
  #out_width: "50%"   # default
---

```julia
using Jchemo, JchemoData
using JLD2, CairoMakie, FreqTables 
```

#### Data importation

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/forages2.jld2") 
@load db dat
pnames(dat)
```
  
#### Data preparation and short description

```julia
X = dat.X 
Y = dat.Y
ntot = nro(X)
```

```julia term = true
@head X
@head Y
```

```julia
y = Y.typ
tab(y)
```

```julia
freqtable(y, Y.test)
```

```julia
wlst = names(X)
wl = parse.(Float64, wlst) 
```

**Note:**: X-data are already preprocessed (SNV + Savitsky-Golay).

```julia
plotsp(X, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

#### Split Tot ==> Train + Test

The model is fitted on **Train**, and the generalization error is estimated on **Test**.
Here the split of **Tot** is already provided inside the dataset (= variable `test`), 
but **Tot** could also be split *a posteriori*, for instance by sampling (random, systematic 
or any other designs). 

```julia
s = Bool.(Y.test)
Xtrain = rmrow(X, s)
ytrain = rmrow(y, s)
Xtest = X[s, :]
ytest = y[s]
ntrain = nro(Xtrain)
ntest = nro(Xtest)
(ntot = ntot, ntrain, ntest)
```

#### CV-Segments

```julia
K = 3 ; segm = segmkf(ntrain, K; rep = 1)       # K-fold CV  
#m = 100 ; segm = segmts(ntrain, m; rep = 3)    # Test-set CV
```

#### Grid

```julia
nlvdis = [25] ; metric = [:mah]
h = [1; 2; 5] ; k = [100; 250; 500]
nlv = 0:15
pars = mpar(nlvdis = nlvdis, metric = metric, h = h, 
    k = k)
```

```julia
length(pars[1])
```

#### Grid-search by CV

```julia
mod = lwplsrda()
res = gridcv(mod, Xtrain, ytrain; segm, score = errp, 
    nlv, pars, verbose = false).res
```

**Selection of the best parameters combination:**

```julia
group = string.("metric=", res.metric, res.nlvdis, " h=", res.h, " k=", res.k)
plotgrid(res.nlv, res.y1, group; step = 2, xlabel = "Nb. LVs", 
    ylabel = "Err-CV").f
```

```julia
u = findall(res.y1 .== minimum(res.y1))[1] 
res[u, :]
```

#### Final prediction (Test) using the optimal model

```julia
mod = lwplsrda(nlvdis = res.nlvdis[u], metric = res.metric[u], 
    h = res.h[u], k = res.k[u], nlv = res.nlv[u], verbose = false)
fit!(mod, Xtrain, ytrain)
pred = predict(mod, Xtest).pred
errp(pred, ytest)
```

#### Confusion matrix

```julia
cf = confusion(pred, ytest) ;
cf.cnt
```

```julia
cf.pct
```

```julia
plotconf(cf).f
```

