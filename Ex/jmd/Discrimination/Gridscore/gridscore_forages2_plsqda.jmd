---
title: gridscore - forages2 - Pls-Qda 
weave_options:
  error: true
  wrap: false
  term: false
  out_width: 60%
  out_height: 30%
---

```julia
using Jchemo, JchemoData
using JLD2, CairoMakie
using FreqTables 
```

#### Data importation

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/forages2.jld2") 
@load db dat
@names dat
```

```julia
X = dat.X 
@head X 
```

```julia
Y = dat.Y
@head Y
```

```julia
y = Y.typ
test = Y.test
tab(y)
```

```julia
freqtable(y, test)
```

```julia
wlst = names(X)
wl = parse.(Int, wlst)
#plotsp(X, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

**Note:**: X-data are already preprocessed (SNV + Savitsky-Golay 2nd deriv).

#### Split Tot to Train/Test

```julia
s = Bool.(test)
Xtrain = rmrow(X, s)
ytrain = rmrow(y, s)
Xtest = X[s, :]
ytest = y[s]
ntot = nro(X)
ntrain = nro(Xtrain)
ntest = nro(Xtest)
(ntot = ntot, ntrain, ntest)
```

```julia
tab(ytrain)
```

```julia
tab(ytest)
```

#### Split Train to Cal/Val for model tuning

```julia
pct = .3  # proportion of Train for Val
nval = round(Int, pct * ntrain)    
s = samprand(ntrain, nval)
```

```julia
Xcal = Xtrain[s.train, :]
ycal = ytrain[s.train]
Xval = Xtrain[s.test, :]
yval = ytrain[s.test]
ncal = ntrain - nval 
(ntot = ntot, ntrain, ncal, nval, ntest)
```

#### Grid-search 

The importance of each class is made equal, and a continuum between PLS-QDA and PLS-LDA
is evaluated. 

```julia
prior = [:unif]
alpha = [0, .25, .5, .75, 1]  # continuum parameter: from alpha = 0 (PLS-QDA) to alpha = 1 (PLS-LDA)
nlv = 1:20    # here must be > 0
pars = mpar(prior = prior, alpha = alpha)
model = plsqda()
res = gridscore(model, Xcal, ycal, Xval, yval; score = merrp, pars, nlv)   
```

```julia
plotgrid(res.nlv, res.y1, res.alpha; step = 2, xlabel = "Nb. LVs", ylabel = "ERRP-Val", leg_title = "Continuum").f
```

**Selection of the best parameter combination**

```julia
u = findall(res.y1 .== minimum(res.y1))[1] 
res[u, :]
```

#### Final prediction (Test) using the optimal model

```julia
model = plsqda(prior = res.prior[u], alpha = res.alpha[u], nlv = res.nlv[u])
fit!(model, Xtrain, ytrain)
@head pred = predict(model, Xtest).pred
```

**Generalization error**

```julia
errp(pred, ytest)
```

```julia
merrp(pred, ytest)
```

```julia
cf = conf(pred, ytest)
@names cf
```

```julia
cf.cnt
```

```julia
cf.pct
```
