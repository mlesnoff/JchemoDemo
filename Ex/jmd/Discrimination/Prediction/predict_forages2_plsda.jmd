---
title: Prediction - forages2 - Plsda 
weave_options:
  error: true
  wrap: true
  term: false
  out_width: 60%
  out_height: 30%
---

```julia term = true
using Jchemo, JchemoData
using JLD2, CairoMakie
using FreqTables 
```

#### Data importation

```julia term = true
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/forages2.jld2") 
@load db dat
@names dat
```

```julia term = true
X = dat.X 
Y = dat.Y
ntot = nro(X)
y = Y.typ ;
test = Y.test ;
tab(y)
```

```julia term = true
freqtable(y, test)
```

```julia term = true
wlst = names(X)
wl = parse.(Int, wlst) ;
#plotsp(X, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

**Note:**: X-data are already preprocessed (SNV + Savitsky-Golay 2nd deriv).

#### Split Tot to Train/Test

The model is fitted on **Train**, and the generalization error is estimated on **Test**.
In this example, **Train** is already defined in variable `typ` of the dataset, and **Test** is defined by the remaining 
samples. But **Tot** could also be split *a posteriori*, for instance by sampling (random, systematic or any other designs). 
See for instance functions `samprand`, `sampsys`, etc.

```julia term = true
s = Bool.(test) ;
Xtrain = rmrow(X, s) ;
ytrain = rmrow(y, s) ;
Xtest = X[s, :] ;
ytest = y[s] ;
ntrain = nro(Xtrain)
ntest = nro(Xtest)
(ntot = ntot, ntrain, ntest)
```

```julia term = true
tab(ytrain)
tab(ytest)
```

#### Model fitting

**'PLSDA'** can represent different methods, e.g. PLS-MLR-DA (or PLSR-DA), PLS-LDA, PLS-QDA or PLS-KDA-DA. 

**Note:** 
- In the functions below, the default value for argument `prior` is set to `:prop`. If the classes are highly unbalanced,
    it is recommended to set `prior = :unif` to avoid bias in the predictions (especially when using function `plsrda`). 
    See the help of the respective functions for more details.
- For unbalanced classes, it is also recommended to use `merrp` instead of `errp` (see the respectve help pages) to compute 
    the global prediction error rates in CV processes or on test sets. 
  
```julia term = true
nlv = 15
model = plsrda(; nlv) 
#model = plslda(; nlv) 
#model = plsqda(; nlv) 
#model = plsqda(; nlv, alpha = 0.5)   # 'alpha' = regularization parameter
#model = plskdeda(; nlv) 
#model = plskdeda(; nlv, a = .5)    # 'a' = bandwidth parameter (see also parameter 'h') 
```

```julia term = true
fit!(model, Xtrain, ytrain)
@names model 
fitm = model.fitm ;
@names fitm
typeof(fitm.fitm)
@names fitm.fitm
```

```julia term = true
res = predict(model, Xtest) ;
@names res
@head pred = res.pred
@head res.posterior   # predicted posterior probabilities
```

```julia term = true
@head predict(model, Xtest; nlv = 2).pred
```

```julia term = true
predict(model, Xtest; nlv = 0:2).pred
```

```julia term = true
errp(pred, ytest)
merrp(pred, ytest)
```

#### Confusion matrix

```julia term = true
cf = conf(pred, ytest) ;
@names cf
```

```julia term = true
cf.cnt
cf.pct
cf.diagpct
cf.accpct
```

```julia term = true
plotconf(cf).f
```

```julia term = true
plotconf(cf; cnt = false).f
```

```julia term = true
plotconf(cf; ptext = false).f
```

