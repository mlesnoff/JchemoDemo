---
title: Prediction - forages2 - Plsda 
weave_options:
  error: true
  wrap: false
  term: false
  out_width: 60%
  out_height: 30%
---

```julia
using Jchemo, JchemoData
using JLD2, CairoMakie
using FreqTables 
```

#### Data importation

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/forages2.jld2") 
@load db dat
@names dat
```

```julia
X = dat.X 
@head X 
```

```julia
Y = dat.Y
@head Y
```

```julia
y = Y.typ   # response variable (class membership)
test = Y.test
tab(y)
```

```julia
freqtable(y, test)
```

```julia
wlst = names(X)
wl = parse.(Int, wlst)
#plotsp(X, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

**Note:**: X-data are already preprocessed (SNV + Savitsky-Golay 2nd deriv).

#### Split Tot to Train/Test

The model is fitted on **Train**, and the generalization error is estimated on **Test**. In this example, **Train** is 
already defined in variable `typ` of the dataset, and **Test** is defined by the remaining samples. But **Tot** could 
also be split *a posteriori*, for instance by sampling (random, systematic or any other designs). See for instance 
functions `samprand`, `sampsys`, etc.

```julia
s = Bool.(test)
Xtrain = rmrow(X, s)
ytrain = rmrow(y, s)
Xtest = X[s, :]
ytest = y[s]
ntot = nro(X)
ntrain = nro(Xtrain)
ntest = nro(Xtest)
(ntot = ntot, ntrain, ntest)
```

```julia
tab(ytrain)
```

```julia
tab(ytest)
```

#### Model fitting

**'PLSDA'** is a family of methods, for instance PLS-MLR-DA (or PLSR-DA), PLS-LDA, PLS-QDA or PLS-KDE-DA. 

**Note:** 
- In the functions below, the default value for argument `prior` is set to `:prop`. If the classes to discriminate are highly 
    unbalanced, it is recommended to set `prior = :unif` to avoid bias in the predictions (especially when using function 
    `plsrda` that is very sensitive to unbalanced classes). See the help of the respective functions for more details.
- For unbalanced classes, it is also recommended to use `merrp` instead of `errp` (see the respectve help pages) to compute 
    the overall prediction-error rates in CV processes and/or on test sets. 
  
```julia
nlv = 15
model = plsrda(; nlv) 
#model = plslda(; nlv) 
#model = plsqda(; nlv) 
#model = plsqda(; nlv, alpha = 0.5)   # 'alpha' = continuum parameter
#model = plskdeda(; nlv) 
#model = plskdeda(; nlv, a = .5)    # 'a' = bandwidth parameter (see also parameter 'h') 
```

```julia
fit!(model, Xtrain, ytrain)
@names model 
```

```julia
fitm = model.fitm
@names fitm
```

```julia
typeof(fitm.fitm)
```

```julia
@names fitm.fitm
```

```julia
res = predict(model, Xtest)
@names res
```

```julia
@head pred = res.pred
```

```julia 
@head res.posterior   # predicted posterior probabilities
```

```julia
@head predict(model, Xtest; nlv = 2).pred
```

```julia
predict(model, Xtest; nlv = 0:2).pred
```

```julia
errp(pred, ytest)
```

```julia
merrp(pred, ytest)
```

#### Confusion matrix

```julia
cf = conf(pred, ytest)
@names cf
```

```julia
cf.cnt
```

```julia
cf.pct
```

```julia
cf.diagpct
```

```julia
cf.accpct
```

```julia
plotconf(cf).f
```

```julia
plotconf(cf; cnt = false).f
```

```julia
plotconf(cf; ptext = false).f
```

