---
title: tecator - Data description
weave_options:
  error: true
  wrap: true
  term: false
  out_width: 60%
  out_height: 30%
---


```julia term = true
using Jchemo, JchemoData
using JLD2, DataFrames, CairoMakie
```

#### Data importation

```julia term = true
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/tecator.jld2") 
@load db dat
@names dat
```

```julia term = true
X = dat.X ;
Y = dat.Y ;
@head X
@head Y
ntot = nro(X)
```

#### X data

```julia term = true
wlst = names(X) 
wl = parse.(Int, wlst) ;
```

```julia term = true
plotsp(X, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

**Preprocessing by SNV and derivation**

```julia term = true
model1 = snv()
model2 = savgol(npoint = 15, deriv = 2, degree = 3)
model = pip(model1, model2) ;
fit!(model, X)
Xp = transf(model, X) ;
@head Xp 
```

```julia term = true
plotsp(Xp, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

#### Y data

```julia term = true
summ(Y).res
```

```julia term = true
typ = Y.typ ;
tab(typ)
```

Building a new variable, `typ2`, aggregating categories `test` and `validation` in a new categogry `test` 

```julia term = true
typ2 = copy(typ) ;
typ2[typ2 .== "val"] .= "test" ;
tab(typ2)
```

```julia term = true
summ(Y, typ2)
```

**A given variable**

```julia term = true
namy = names(Y)[1:3]
j = 2
nam = namy[2]
y = Y[:, nam] ;
s = typ2 .== "train" ;
ytrain = y[s] ;  # training observations
ytest = rmrow(y, s) ; # remaing observations
```

```julia 
f = Figure(size = (500, 400))
ax = Axis(f[1, 1]; xlabel = uppercase(nam), ylabel = "Nb. observations")
hist!(ax, ytrain; bins = 50, label = "Train")
hist!(ax, ytest; bins = 50, label = "Test")
axislegend(position = :rt)
f
```

```julia 
f = Figure(size = (500, 400))
offs = [10; 0]
ax = Axis(f[1, 1]; xlabel = uppercase(nam),  ylabel = "Nb. observations", 
    yticks = (offs, ["Train" ; "Test"]))
hist!(ax, ytrain; offset = offs[1], bins = 50)
hist!(ax, ytest; offset = offs[2], bins = 50)
f
```

```julia 
f = Figure(size = (400, 300))
ax = Axis(f[1, 1]; xlabel = uppercase(nam), ylabel = "Density")
density!(ax, ytrain; color = :blue, label = "Train")
density!(ax, ytest; color = (:red, .5), label = "Test")
axislegend(position = :rt)  
f
```

```julia 
f = Figure(size = (500, 400))
offs = [.15; 0]
ax = Axis(f[1, 1]; xlabel = uppercase(nam), ylabel = "Density", 
    yticks = (offs, ["Train" ; "Test"]))
bdw = .3
density!(ax, ytrain; offset = offs[1], color = (:slategray, 0.5), bandwidth = bdw)
density!(ax, ytest; offset = offs[2], color = (:slategray, 0.5), bandwidth = bdw)
f
```

```julia
f = Figure(size = (500, 400))
ax = Axis(f[1, 1]; xticks = (0:1, ["Test", "Train"]), xlabel = "Group", ylabel = uppercase(nam))
boxplot!(ax, s, y; width = .3, show_notch = true)
f
```


