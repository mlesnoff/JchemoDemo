---
title: octane - Pca score and orthogonal distances
weave_options:
  error: true
  wrap: true
  term: false
  out_width: "60%" 
---

```julia
using Jchemo, JchemoData
using JLD2, CairoMakie, GLMakie
```

```julia
CairoMakie.activate!()
#GLMakie.activate!() 
```

#### Data importation

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/octane.jld2") 
@load db dat
@names dat
```

#### Data preparation and short description

```julia
X = dat.X 
n = nro(X)
```

```julia term = true
@head X
```

```julia
wlst = names(X)
wl = parse.(Float64, wlst) 
```

Six of the samples of the dataset contain added alcohol  (= 25, 26, and 36-39).

```julia
plotsp(X, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance", title = "Octane data").f
```

#### Initial Pca model fitting

```julia
model0 = pcasvd(nlv = 6) 
## For robust Pca, do:
#model0 = pcasph(; nlv = 6)
## or:
#model0 = pcaout(; nlv = 6)
fit!(model0, X)  
@names model0
@names model0.fitm
```

**Scores:**

```julia term = true
@head T = model0.fitm.T 
```

#### Score distance (SD)

```julia
model = occsd()
fit!(model, model0.fitm)
@names model
@names model.fitm
```

```julia
d = model.fitm.d
```

```julia
f = Figure(size = (500, 400))
Axis(f[1, 1]; xlabel = "Standardized score distance", ylabel = "Nb. observations")
hist!(d.dstand; bins = 20)
f
```

#### Orthogonal distance (OD)

```julia
model = occod() 
fit!(model, model0.fitm, X)
@names model
@names model.fitm
```

```julia
d = model.fitm.d
```

```julia
f = Figure(size = (500, 400))
Axis(f[1, 1]; xlabel = "Standardized orthogonal distance", ylabel = "Nb. observations")
hist!(d.dstand; bins = 20)
f
```

#### SD-OD

```julia
model = occsd()
fit!(model, model0.fitm)
d_sd = model.fitm.d
model = occod()
fit!(model, model0.fitm, X)
d_od = model.fitm.d
f, ax = plotxy(d_sd.dstand, d_od.dstand; xlabel = "Standardized SD", ylabel = "Standardized OD")
hlines!(ax, 1; color = :grey, linestyle = :dash)
vlines!(ax, 1; color = :grey, linestyle = :dash)
f
```

```julia
f, ax = plotxy(d_sd.dstand, d_od.dstand; xlabel = "Standardized SD", ylabel = "Standardized OD")
text!(ax, d_sd.dstand, d_od.dstand; text = string.(1:n), fontsize = 15)
hlines!(ax, 1; color = :grey, linestyle = :dash)
vlines!(ax, 1; color = :grey, linestyle = :dash)
f
```

#### Direct computation of a composite SD-OD

```julia
model = occsdod() 
fit!(model, model0.fitm, X)
@names model
@names model.fitm
```

```julia
d = model.fitm.d
```

```julia
f, ax = plotxy(1:n, d.dstand; xlabel = "Observation", ylabel = "Standardized SD-OD distance")
text!(ax, 1:n, d.dstand; text = string.(1:n), fontsize = 15)
hlines!(ax, 1; color = :grey, linestyle = :dash)
f
```

