---
title: pca_sd_od_octane.jl
weave_options:
  error: true
  wrap: true
  term: false
  #out_width: "50%"   # default
---

```julia
using JLD2, CairoMakie, GLMakie
using Jchemo, JchemoData
```

```julia
CairoMakie.activate!()
#GLMakie.activate!() 
```

#### Data importation

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/octane.jld2") 
@load db dat
pnames(dat)
```

#### Data preparation and short description

```julia
X = dat.X 
n = nro(X)
```

```julia term = true
@head X
```

```julia
wl = names(X)
wl_num = parse.(Float64, wl)
```

Six of the samples of the dataset contain added alcohol  (= 25, 26, and 36-39).

```julia
plotsp(X, wl_num;
    xlabel ="Wavelength (nm)", ylabel = "Absorbance",
    title = "Octane data").f
```

#### PCA model fitting

```julia
fm = pcasvd(X; nlv = 6) ; 
## For robust spherical PCA, do:
#fm = pcasph(X; nlv = 6) ;  
pnames(fm)
```

**Scores:**

```julia term = true
T = fm.T ;
@head T
```

#### Score distance (SD)

```julia
res = occsd(fm) ;
pnames(res)
```

```julia
d = res.d
```

```julia
f = Figure(resolution = (500, 400))
Axis(f[1, 1]; xlabel = "Standardized score distance", 
    ylabel = "Nb. observations")
hist!(d.dstand; bins = 20)
f
```

#### Orthogonal distance (OD)

```julia
res = occod(fm, X) ;
pnames(res)
```

```julia
d = res.d
```

```julia
f = Figure(resolution = (500, 400))
Axis(f[1, 1]; xlabel = "Standardized orthogonal distance", 
    ylabel = "Nb. observations")
hist!(d.dstand; bins = 20)
f
```

#### SD-OD

```julia
sd = occsd(fm).d
od = occod(fm, X).d
f, ax = plotxy(sd.dstand, od.dstand;
    xlabel = "Standardized SD", ylabel = "Standardized OD")
hlines!(ax, 1)
vlines!(ax, 1)
f
```

```julia
CairoMakie.activate!()  
#GLMakie.activate!() 
sd = occsd(fm).d
od = occod(fm, X).d
f, ax = plotxy(sd.dstand, od.dstand;
    xlabel = "Standardized SD", ylabel = "Standardized OD")
text!(ax, sd.dstand, od.dstand; text = string.(1:n), 
    fontsize = 15)
hlines!(ax, 1)
vlines!(ax, 1)
f
```

#### Direct computation of a composite SD-OD

```julia
res = occsdod(fm, X) ;
pnames(res)
```

```julia
d = res.d
```

```julia
f, ax = plotxy(1:n, d.dstand;
    xlabel = "Observation", 
    ylabel = "Standardized SD-OD distance")
text!(ax, 1:n, d.dstand; text = string.(1:n), 
    fontsize = 15)
hlines!(ax, 1)
f
```

