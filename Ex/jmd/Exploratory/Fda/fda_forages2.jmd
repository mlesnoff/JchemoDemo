---
title: Fda - forages2 
weave_options:
  error: true
  wrap: false
  term: false
  out_width: 60%
  out_height: 30%
---

```julia
using Jchemo, JchemoData
using JLD2, CairoMakie
using FreqTables 
```

#### Data importation

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/forages2.jld2") 
@load db dat
@names dat
```

```julia
X = dat.X
@head X
```

```julia
Y = dat.Y
@head Y
```

```julia
y = Y.typ   # response variable (class membership)  # the classes 
test = Y.test
tab(y)
```

```julia
freqtable(y, test)
```

```julia
wlst = names(X)
wl = parse.(Int, wlst)
#plotsp(X, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

**Note:**: X-data are already preprocessed (SNV + Savitsky-Golay 2nd deriv).

#### Split Tot to Train/Test

The model is fitted on **Train**, and the generalization error is estimated on **Test**. In this example, **Train** is 
already defined in variable `typ` of the dataset, and **Test** is defined by the remaining samples. But **Tot** could 
also be split *a posteriori*, for instance by sampling (random, systematic or any other designs). See for instance 
functions `samprand`, `sampsys`, etc.

```julia
s = Bool.(test)
Xtrain = rmrow(X, s)
ytrain = rmrow(y, s)
Xtest = X[s, :]
ytest = y[s]
ntot = nro(X)
ntrain = nro(Xtrain)
ntest = nro(Xtest)
(ntot = ntot, ntrain, ntest)
```

Since X-columns are highly colinear, the Fda requires a regularization. It can be reached for instance 1) by preliminary 
dimension reduction, or 2) by using a ridge regularization.

#### 1) Fda on preliminary computed Pca scores

```julia
model0 = pcasvd(nlv = 10)
fit!(model0, Xtrain)
@names model0
@names model0.fitm
```

```julia
@head Ttrain_pca = model0.fitm.T 
```

```julia
model = fda(nlv = 2)
#model = fdasvd(nlv = 2)     # alternative algorithm (same result)
fit!(model, Ttrain_pca, ytrain) 
fitm = model.fitm
@names fitm
```

```julia
@head Ttrain = model.fitm.T
```

```julia
lev = fitm.lev
nlev = length(lev)
```

```julia
ct = fitm.Tcenters
```

```julia
f, ax = plotxy(Ttrain[:, 1], Ttrain[:, 2], ytrain; title = "Fda", ellipse = true)
scatter!(ax, ct[:, 1], ct[:, 2], markersize = 10, color = :red)
f
```

```julia
color = cgrad(:lightrainbow, nlev; categorical = true, alpha = .5)
f, ax = plotxy(Ttrain[:, 1], Ttrain[:, 2], ytrain; color, title = "Fda", ellipse = true)
scatter!(ax, ct[:, 1], ct[:, 2]; markersize = 10, color = :red)
f
```

**Projection of Xtest**

```julia
@head Ttest_pca = transf(model0, Xtest) 
```

```julia
@head Ttest = transf(model, Ttest_pca)
```

```julia
i = 1  # class "i" in test
color = cgrad(:lightrainbow, nlev; categorical = true, alpha = .5)
f, ax = plotxy(Ttrain[:, 1], Ttrain[:, 2], ytrain; color, title = "Fda", ellipse = true)
scatter!(ax, ct[:, 1], ct[:, 2]; markersize = 10, color = :red)
s = ytest .== lev[i]
zT = Ttest[s, :]
scatter!(ax, zT[:, 1], zT[:, 2]; markersize = 10, color = :blue)
f
```

#### 2) Fda directly on X but using a ridge regularization 

**Note:** If the ridge parameter `lb` is too small (e.g. here from around 1e-10), the model can be overfitted and predictions 
of new observations are misleading.

```julia
lb = 1e-5
model = fda(; nlv = 2, lb)
#model = fdasvd(; nlv = 2, lb)
fit!(model, Xtrain, ytrain)
fitm = model.fitm
```

```julia
lev = fitm.lev
nlev = length(lev)
```

```julia
ct = fitm.Tcenters
```

```julia
@head Ttrain = fitm.T
```

```julia
f, ax = plotxy(Ttrain[:, 1], Ttrain[:, 2], ytrain; title = "Fda", ellipse = true)
scatter!(ax, ct[:, 1], ct[:, 2]; markersize = 10, color = :red)
f
```

```julia
color = cgrad(:lightrainbow, nlev; categorical = true, alpha = .7)
f, ax = plotxy(Ttrain[:, 1], Ttrain[:, 2], ytrain; color, title = "Fda", ellipse = true)
scatter!(ax, ct[:, 1], ct[:, 2]; markersize = 10, color = :red)
f
```

**Projection of Xtest**

```julia
@head Ttest = transf(model, Xtest)
```

```julia
i = 1  # class "i" in test
color = cgrad(:lightrainbow, nlev; categorical = true, alpha = .7)
f, ax = plotxy(Ttrain[:, 1], Ttrain[:, 2], ytrain; color, title = "Projection test-class $(lev[i]) (blue points)", 
    ellipse = true)
scatter!(ax, ct[:, 1], ct[:, 2]; markersize = 10, color = :red)
s = ytest .== lev[i]
zT = Ttest[s, :]
scatter!(ax, zT[:, 1], zT[:, 2]; markersize = 10, color = :blue)
f
```

