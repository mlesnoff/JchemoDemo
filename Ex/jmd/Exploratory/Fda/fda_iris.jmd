---
title: Fda - iris
weave_options:
  error: true
  wrap: true
  term: false
  out_width: "60%" 
---

```julia
using Jchemo, JchemoData
using JLD2, CairoMakie
```

#### Data importation

```julia term = true
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data", "iris.jld2") 
@load db dat
@names dat
```

```julia term = true
summ(dat.X)
```

```julia term = true
@head X = dat.X[:, 1:4] 
@head y = dat.X[:, 5]    # the classes (species)
ntot = nro(X)
```
  
```julia term = true
tab(y)
```

```julia term = true
lev = mlev(y)
nlev = length(lev)
```

#### Split Tot to Train/Test

```julia term = true
ntest = 30
s = samprand(ntot, ntest)
Xtrain = X[s.train, :] ;
ytrain = y[s.train] ;
Xtest = X[s.test, :] ;
ytest = y[s.test] ;
ntrain = ntot - ntest
(ntot = ntot, ntrain, ntest)
tab(ytrain)
tab(ytest)
```

#### Model fitting

```julia
model = fda(nlv = 2)
#model = fdasvd(nlv = 2)     # alternative algorithm (same result)
fit!(model, Xtrain, ytrain) 
fitm = model.fitm ;
@names fitm
```

```julia
lev = fitm.lev
nlev = length(lev)
```

**Fda scores**

```julia term = true
@head Ttrain = fitm.T
```

**Class centers projected on the score space**

```julia
ct = fitm.Tcenters
```

```julia term = true
f, ax = plotxy(Ttrain[:, 1], Ttrain[:, 2], ytrain; title = "Fda", ellipse = true)
scatter!(ax, ct[:, 1], ct[:, 2]; markersize = 10, color = :red)
f
```

```julia term = true
color = cgrad(:lightrainbow, nlev; categorical = true, alpha = .7) ;
f, ax = plotxy(Ttrain[:, 1], Ttrain[:, 2], ytrain; color, title = "Fda", ellipse = true)
scatter!(ax, ct[:, 1], ct[:, 2]; markersize = 10, color = :red)
f
```

#### X-loadings matrix

Columns of matrix `V` are coefficients of the linear discriminant function, 
corresponding to object `LD` of function `lda` of the R package `MASS`.

```julia
V = fitm.V
```

```julia
V' * V    # not orthogonal
```

#### Explained variance 

```julia
fitm.eig
```

```julia
fitm.sstot
```

Explained variance is computed from the Pca of the class centers in 
the transformed scale.

```julia
summary(model)
```

#### Projection of Xtest to the score space

```julia
@head Ttest = transf(model, Xtest)
```

```julia term = true
i = 1  # class "i" in test
color = cgrad(:lightrainbow, nlev; categorical = true, alpha = .7) ;
f, ax = plotxy(Ttrain[:, 1], Ttrain[:, 2], ytrain; color, 
    title = string("Projection test-class ", lev[i], " (blue points)"), ellipse = true) ;
scatter!(ax, ct[:, 1], ct[:, 2]; markersize = 10, color = :red) ;
s = ytest .== lev[i] ;
zT = Ttest[s, :] ;
scatter!(ax, zT[:, 1], zT[:, 2]; markersize = 10, color = :blue) ;
f
```



