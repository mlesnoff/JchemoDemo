---
title: fda_forages2.jl
weave_options:
  error: true
  wrap: true
  term: false
  #out_width: "50%"   # default
---

```julia
using JLD2, CairoMakie, FreqTables 
using Jchemo, JchemoData
```

#### Data importation

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/forages2.jld2") 
@load db dat
pnames(dat)
```
  
#### Data preparation and short description

```julia
X = dat.X 
Y = dat.Y
ntot = nro(X)
```

```julia term = true
@head X
@head Y
```

```julia
y = Y.typ
tab(y)
```

```julia
freqtable(y, Y.test)
```

```julia
wlst = names(X)
wl = parse.(Float64, wlst) 
```

**Note:**: X-data are already preprocessed (SNV + Savitsky-Golay).

```julia
plotsp(X, wl; xlabel = "Wavelength (nm)", 
    ylabel = "Absorbance").f
```

#### Split Tot ==> Train + Test

The model is fitted on **Train**, and the generalization error is estimated on **Test**.
Here the split of **Tot** is already provided inside the dataset (= variable `test`), 
but **Tot** could also be split *a posteriori*, for instance by sampling (random, systematic 
or any other designs). 

```julia
s = Bool.(Y.test)
Xtrain = rmrow(X, s)
ytrain = rmrow(y, s)
Xtest = X[s, :]
ytest = y[s]
ntrain = nro(Xtrain)
ntest = nro(Xtest)
(ntot = ntot, ntrain, ntest)
```

Since X-data contain high multicolinearities, a regularization is required 
for the FDA, for instance: 

1) by preliminary dimension reduction,

2) or by using a ridge regularization.

#### 1) FDA on PCA scores

```julia
fm0 = pcasvd(Xtrain; nlv = 10) ;
pnames(fm0)
```

```julia
Ttrain_pca = fm0.T 
```

```julia
fm = fda(Ttrain_pca, ytrain; nlv = 2) ;
#fm = fdasvd(Ttrain_pca, ytrain; nlv = 2) ; # alternative algorithm (same result)
pnames(fm)
```

```julia
Ttrain = fm.T
```

```julia
lev = fm.lev
nlev = length(lev)
```

```julia
ct = fm.Tcenters
```

```julia
f, ax = plotxy(Ttrain[:, 1], Ttrain[:, 2], ytrain;
    title = "FDA", ellipse = true)
scatter!(ax, ct[:, 1], ct[:, 2],
    markersize = 10, color = :red)
f
```

**Projection of Xtest**

```julia
Ttest_pca = Jchemo.transform(fm0, Xtest) 
```

```julia
Ttest = Jchemo.transform(fm, Ttest_pca)
```

```julia
i = 1  # class 
f, ax = plotxy(Ttrain[:, 1], Ttrain[:, 2], ytrain;
    title = "FDA")
scatter!(ax, ct[:, 1], ct[:, 2],
    markersize = 10, color = :red)
s = ytest .== lev[i]
zT = Ttest[s, :]
scatter!(ax, zT[:, 1], zT[:, 2],
    markersize = 10, color = (:purple, .8))
f
```

#### 2) FDA directly on X but using a ridge regularization 

**Remark:** If the ridge parameter `lb` is too small (e.g. here from 
around 1e-10), the model can be overfitted and the discrimination 
of new observations is misleading.

```julia
lb = 1e-5
fm = fda(Xtrain, ytrain; nlv = 2, lb = lb) ;
#fm = fdasvd(Xtrain, ytrain; nlv = 2, lb = lb) ;
pnames(fm)
```

```julia
lev = fm.lev
nlev = length(lev)
```

```julia
ct = fm.Tcenters
```

```julia
Ttrain = fm.T
```

```julia
f, ax = plotxy(Ttrain[:, 1], Ttrain[:, 2], ytrain;
    title = "FDA", ellipse = true)
scatter!(ax, ct[:, 1], ct[:, 2],
    markersize = 10, color = :red)
f
```

**Projection of Xtest**

```julia
Ttest = Jchemo.transform(fm, Xtest)
```

```julia
i = 1  # class 
f, ax = plotxy(Ttrain[:, 1], Ttrain[:, 2], ytrain;
    title = "FDA")
scatter!(ax, ct[:, 1], ct[:, 2],
    markersize = 10, color = :red)
s = ytest .== lev[i]
zT = Ttest[s, :]
scatter!(ax, zT[:, 1], zT[:, 2],
    markersize = 10, color = (:purple, .8))
f
```

