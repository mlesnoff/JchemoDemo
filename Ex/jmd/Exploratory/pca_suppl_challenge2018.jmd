---
title: pca_suppl_challenge2018.jl
weave_options:
  error: true
  wrap: true
  term: false
  #out_width: "50%"   # default
---

```julia
using Jchemo, JchemoData
using JLD2, CairoMakie
using FreqTables
```

#### Data importation

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/challenge2018.jld2") 
@load db dat
pnames(dat)
```

#### Data preparation and short description

```julia
X = dat.X 
Y = dat.Y
ntot, p = size(X)
```

```julia term = true
@head X
@head Y
```

```julia
summ(Y)
```

```julia
y = Y.conc
typ = Y.typ
label = Y.label 
test = Y.test
tab(test)
```

```julia
wlst = names(X)
wl = parse.(Float64, wlst) 
```

```julia
freqtable(string.(typ, "-", Y.label))
```

```julia
freqtable(typ, test)
```

```julia
plotsp(X, wl; nsamp = 30).f
```

#### Preprocessing

```julia
mod1 = model(snv; centr = true, scal = true)
mod2 = model(savgol; npoint = 21, deriv = 2, degree = 3)
mod = pip(mod1, mod2)
fit!(mod, X)
Xp = transf(mod, X) 
```

```julia
plotsp(Xp, wl; nsamp = 30).f
```

#### Split Tot ==> Train + Test

The model is tuned on **Train**, and the generalization error is estimated on **Test**.
Here the split of **Tot** is already provided inside the dataset (= variable `test`), 
but **Tot** could also be split *a posteriori*, for instance by sampling (random, systematic 
or any other designs). 

```julia
s = Bool.(test)
Xtrain = rmrow(Xp, s)
ytrain = rmrow(y, s)
Xtest = Xp[s, :]
ytest = y[s]
ntrain = nro(Xtrain)
ntest = nro(Xtest)
(ntot = ntot, ntrain, ntest)
```

#### PCA on Xtrain

```julia
nlv = 15
mod = model(pcasvd; nlv)
fit!(mod, Xtrain)
```

```julia
res = summary(mod, Xtrain).explvarx
```

```julia
plotgrid(res.nlv, res.pvar; step = 2, xlabel = "PC", ylabel = "Prop. variance explained").f
```

```julia term = true
@head Ttrain = mod.fm.T
```
#### Projection of Xtest

Below function `transform` has to be qualified since both packages Jchemo 
and DataFrames export a function `transform`. This will be the same with 
common function names such as `predict`, `coef`, etc.

```julia term = true
@head Ttest = transf(mod, Xtest)
```

```julia
T = vcat(Ttrain, Ttest)
group = vcat(repeat(["0-Train";], ntrain), repeat(["1-Test";], ntest))
colm = [:blue, (:red, .5)]
i = 3
plotxy(T[:, i], T[:, i + 1], group; color = colm, xlabel = string("PC", i), 
    ylabel = string("PC", i + 1)).f
```

#### SD and OD distances

```julia
mod_d = model(occsdod) 
fit!(mod_d, mod.fm, Xtrain)
pnames(mod_d)
pnames(mod_d.fm)
```

```julia
dtrain = mod_d.fm.d
```

**Values for Xtest**

```julia
dtest = predict(mod_d, Xtest).d
```

```julia
f = Figure(size = (500, 400))
ax = Axis(f[1, 1], xlabel = "SD", ylabel = "OD")
scatter!(ax, dtrain.dstand_sd, dtrain.dstand_od, label = "Train")
scatter!(ax, dtest.dstand_sd, dtest.dstand_od, color = (:red, .5), label = "Test")
hlines!(ax, 1; color = :grey, linestyle = :dash)
vlines!(ax, 1; color = :grey, linestyle = :dash)
axislegend(position = :rt)
f
```

**Same using plotxy:**

```julia
d = vcat(dtrain, dtest)
group = vcat(repeat(["0-Train";], ntrain), repeat(["1-Test";], ntest))
colm = [:blue, (:red, .5)]
plotxy(d.dstand_sd, d.dstand_od, group; color = colm, xlabel = "Stand. SD", ylabel = "Stand. OD").f
```

#### Composite distance SD-OD

```julia
f = Figure(size = (500, 400))
ax = Axis(f[1, 1], xlabel = "Standardized distance", ylabel = "Nb. observations")
hist!(ax, dtrain.dstand; bins = 50, label = "Train")
hist!(ax, dtest.dstand; bins = 50, label = "Test")
vlines!(ax, 1; color = :grey, linestyle = :dash)
axislegend(position = :rt, framevisible = false)
f
```
