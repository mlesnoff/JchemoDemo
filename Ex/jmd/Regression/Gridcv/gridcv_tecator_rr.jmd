---
title: gridcv - tecator - Rr
weave_options:
  error: true
  wrap: true
  term: false
  out_width: 60%
  out_height: 30%
---

```julia term = true
using Jchemo, JchemoData
using JLD2, CairoMakie
```

#### Data importation

```julia term = true
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/tecator.jld2") 
@load db dat
@names dat
```

```julia term = true
X = dat.X
Y = dat.Y 
typ = Y.typ ;
tab(typ)
```

```julia term = true
wlst = names(X) ;
wl = parse.(Float64, wlst) 
#plotsp(X, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

**Preprocessing**

```julia term = true
model1 = snv()
model2 = savgol(npoint = 15, deriv = 2, degree = 3)
model = pip(model1, model2)
fit!(model, X)
@head Xp = transf(model, X) 
#plotsp(Xp, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

#### Split Train/Test of Tot

```julia term = true
s = typ .== "train" ;
Xtrain = Xp[s, :] ; 
Ytrain = Y[s, :] ;
Xtest = rmrow(Xp, s) ;
Ytest = rmrow(Y, s) ;
ntrain = nro(Xtrain)
ntest = nro(Xtest)
ntot = ntrain + ntest
(ntot = ntot, ntrain, ntest)
```

**Working response y**

```julia term = true
namy = names(Y)[1:3]
j = 2  
nam = namy[j]    # work on the j-th y-variable
ytrain = Ytrain[:, nam] ;
ytest = Ytest[:, nam] ;
```

#### CV-Segments for model tuning

**Replicated K-fold CV**

```julia term = true
K = 3     # nb. folds (segments)
rep = 10  # nb. replications
segm = segmkf(ntrain, K; rep = rep)
```

#### Grid-search 

```julia term = true
lb = 10.0.^(-15:.1:3)
model = rr()
rescv = gridcv(model, Xtrain, ytrain; segm, score = rmsep, lb) ;
@names rescv 
res = rescv.res
res_rep = rescv.res_rep
```

```julia term = true
loglb = round.(log.(10, res.lb), digits = 3)
plotgrid(loglb, res.y1; step = 2, xlabel ="lambda (log scale)", ylabel = "RMSEP-Val").f
```

```julia term = true
f, ax = plotgrid(loglb, res.y1; step = 2, xlabel = "Nb. LVs", ylabel = "RMSEP-CV")
for i = 1:rep, j = 1:K
    zres = res_rep[res_rep.rep .== i .&& res_rep.segm .== j, :]
    lines!(ax, loglb, zres.y1; color = (:grey, .2))
end
lines!(ax, loglb, res.y1; color = :red, linewidth = 1)
f
```

If other parameters have to be defined in the grid, they have to be set in argument `pars`, such as in 
the example below.

```julia term = true
pars = mpar(scal = [false; true])
lb = 10.0.^(-15:.1:3)
model = rr()
res = gridcv(model, Xtrain, ytrain; segm, score = rmsep, pars, lb).res
```

```julia term = true
loglb = round.(log.(10, res.lb), digits = 3)
plotgrid(loglb, res.y1, res.scal; step = 2, xlabel ="lambda (log scale)", ylabel = "RMSEP-Val").f
```

**Selection of the best parameter combination**

```julia term = true
u = findall(res.y1 .== minimum(res.y1))[1] 
res[u, :]
```

#### Final prediction (Test) using the optimal model

```julia term = true
model = rr(nlv = res.lb[u], scal = res.scal[u])
fit!(model, Xtrain, ytrain)
pred = predict(model, Xtest).pred
```

**Generalization error**

```julia term = true
rmsep(pred, ytest)
```

**Plotting predictions vs. observed data**

```julia term = true 
plotxy(pred, ytest; size = (500, 400), color = (:red, .5), bisect = true, title = string("Test set - variable ", nam), 
    xlabel = "Prediction", ylabel = "Observed").f   
```

#### Na√Øve syntax to use gridcv for ridge-based functions 

Parameter `lb` can also be set in argument `pars` (wich is the generic approach to define the grid). 
This is strictly equivalent (gives the same results) but the computations are slower.

```julia term = true
pars = mpar(lb = 10.0.^(-15:.1:3))
model = rr()
gridcv(model, Xtrain, ytrain; segm, score = rmsep, pars).res
```

```julia term = true
pars = mpar(lb = 10.0.^(-15:.1:3), scal = [false; true])
model = rr()
gridcv(model, Xtrain, ytrain; segm, score = rmsep, pars).res
```

