---
title: gridcv_lwplsravg_tecator.jl
weave_options:
  error: true
  wrap: true
  term: false
  #out_width: "50%"   # default
---

```julia
using Jchemo, JchemoData
using JLD2, CairoMakie
```

#### Data importation

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/tecator.jld2") 
@load db dat
pnames(dat)
```

#### Data preparation and short description

```julia
X = dat.X
Y = dat.Y 
ntot = nro(X)
```

```julia term = true
@head X 
@head Y
```

```julia
summ(Y)
```

```julia
namy = names(Y)[1:3]
```

```julia
typ = Y.typ
tab(typ)
```

```julia
wlst = names(X)
wl = parse.(Float64, wlst) 
```

```julia
plotsp(X, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

#### Preprocessing

```julia
mod1 = model(snv; centr = true, scal = true)
mod2 = model(savgol; npoint = 15, deriv = 2, degree = 3)
mod = pip(mod1, mod2)
fit!(mod, X)
Xp = transf(mod, X) 
```

```julia
plotsp(Xp, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

#### Split Tot ==> Train + Test

The model is tuned on **Train**, and the generalization error is estimated on **Test**.
Here the split of **Tot** is already provided inside the dataset (= variable `typ`), 
but **Tot** could also be split *a posteriori*, for instance by sampling (random, systematic 
or any other designs). 

```julia
s = typ .== "train"
Xtrain = Xp[s, :]
Ytrain = Y[s, namy]
Xtest = rmrow(Xp, s)
Ytest = rmrow(Y[:, namy], s)
ntrain = nro(Xtrain)
ntest = nro(Xtest)
ntot = ntrain + ntest
(ntot = ntot, ntrain, ntest)
```
Work on the second y-variable: 

```julia
j = 2  
nam = namy[j]    # y-variable
ytrain = Ytrain[:, nam]
ytest = Ytest[:, nam]
```

#### CV-Segments

```julia
segm = segmkf(ntrain, 4; rep = 5)
```

#### Grid

```julia
nlvdis = [10; 15] ; metric = [:mah] 
h = [1; 2; 5; Inf] ; k = [30; 50; 100]  
nlv = [0:5, 0:10, 1:5, 1:10]
pars = mpar(nlvdis = nlvdis, metric = metric, h = h, k = k, nlv = nlv) 
```

```julia
length(pars[1])
```

#### Grid-search by CV

```julia
mod = model(lwplsravg)
res = gridcv(mod, Xtrain, ytrain; segm, score = rmsep, pars, verbose = false).res 
```

**Selection of the best parameters combination:**

```julia
u = findall(res.y1 .== minimum(res.y1))[1] 
res[u, :]
```

#### Final prediction (Test) using the optimal model

```julia
mod = model(lwplsravg; nlvdis = res.nlvdis[u], metric = res.metric[u], h = res.h[u], 
    k = res.k[u], nlv = res.nlv[u])
fit!(mod, Xtrain, ytrain)
pred = predict(mod, Xtest).pred
rmsep(pred, ytest)
```

```julia
plotxy(pred, ytest; color = (:red, .5), bisect = true, xlabel = "Prediction", 
    ylabel = "Observed (Test)").f  
```
    