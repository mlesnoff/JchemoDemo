---
title: Prediction - tecator - Plsr
weave_options:
  error: true
  wrap: false
  term: false
  out_width: 60%
  out_height: 30%
---

```julia
using Jchemo, JchemoData
using JLD2, CairoMakie
```

#### Data importation

```julia
path_jdat = dirname(dirname(pathof(JchemoData)))
db = joinpath(path_jdat, "data/tecator.jld2") 
@load db dat
@names dat
```

```julia
X = dat.X
@head X 
```

```julia 
Y = dat.Y 
@head Y
``` 

```julia 
typ = Y.typ
tab(typ)
```

```julia
wlst = names(X)
wl = parse.(Float64, wlst) 
#plotsp(X, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

**Preprocessing**

```julia
model1 = snv()
model2 = savgol(npoint = 15, deriv = 2, degree = 3)
model = pip(model1, model2)
fit!(model, X)
@head Xp = transf(model, X) 
#plotsp(Xp, wl; xlabel = "Wavelength (nm)", ylabel = "Absorbance").f
```

#### Split Tot to Train/Test

The model is fitted on **Train**, and the generalization error is estimated on **Test**.
In this example, **Train** is already defined in variable `typ` of the dataset,
and **Test** is defined by the remaining samples. But **Tot** could also be split *a posteriori*, 
for instance by sampling (random, systematic or any other designs). 
See for instance functions `samprand`, `sampsys`, etc.

```julia
s = typ .== "train"
Xtrain = Xp[s, :] 
Ytrain = Y[s, :]
Xtest = rmrow(Xp, s)
Ytest = rmrow(Y, s)
ntrain = nro(Xtrain)
ntest = nro(Xtest)
ntot = ntrain + ntest
(ntot = ntot, ntrain, ntest)
```

**Working response y**

```julia
namy = names(Y)[1:3]
j = 2  
nam = namy[j]    # work on the j-th y-variable
ytrain = Ytrain[:, nam]
ytest = Ytest[:, nam]
```

#### Model fitting

```julia
nlv = 15
model = plskern(; nlv)    # which is the same as below:
#model = plskern(nlv = 15)
fit!(model, Xtrain, ytrain)
@names model
fitm = model.fitm
@names fitm
```

#### Predictions

```julia
@head pred = predict(model, Xtest).pred
```

```julia
@head predict(model, Xtest; nlv = 2).pred
```

```julia
predict(model, Xtest; nlv = 0:2).pred
```

```julia
rmsep(pred, ytest)
```

```julia
bias(pred, ytest)
```

```julia
mse(pred, ytest)
```

```julia
@head r = residreg(pred, ytest) # residuals
```

#### Plotting predictions vs. observed data

```julia 
plotxy(pred, ytest; size = (500, 400), color = (:red, .5), bisect = true, title = string("Test set - variable ", nam), 
    xlabel = "Prediction", ylabel = "Observed").f   
```

**Residuals**

```julia
plotxy(ytest, r; size = (500, 400), color = (:red, .5), zeros = true, title = string("Test set - variable ", nam), 
    xlabel = "Observed (Test)", ylabel = "Residuals").f   
```

#### Adding a smoothing

```julia
zpred = vec(pred)
zr = vec(r)
```

**Predictions**

```julia
model_lo = loessr(span = 1/2) 
fit!(model_lo, zpred, ytest)
pred_lo = predict(model_lo, sort(zpred)).pred
f, ax = plotxy(zpred, ytest; size = (500, 400), bisect = true, title = string("Test set - variable ", nam), 
    xlabel = "Predicted", ylabel = "Observed")
lines!(ax, sort(zpred), vec(pred_lo); color = :red)
f    
```

**Residuals**

```julia
model_lo = loessr(span = 1/2) 
fit!(model_lo, zpred, zr)
pred_lo = predict(model_lo, sort(zpred)).pred
f, ax = plotxy(zpred, zr; size = (500, 400), title = string("Test set - variable ", nam), 
    xlabel = "Predictions", ylabel = "Residuals")
lines!(ax, sort(zpred), vec(pred_lo); color = :red)
hlines!(ax, 0; color = :grey)
f    
```
